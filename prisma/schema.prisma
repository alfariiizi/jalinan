// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// ref: https://github.com/codinginflow/nextjs-15-social-media-app/blob/Final-Project/prisma/schema.prisma

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters", "fullTextSearch"]
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = "file:./dev.db"
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id                    String         @id @default(cuid())
    name                  String
    username              String         @unique
    email                 String?        @unique
    emailVerified         DateTime?
    passwordHash          String
    gogleId               String?        @unique
    avatarUrl             String?
    bio                   String?
    accounts              Account[]
    sessions              Session[]
    posts                 Post[]
    following             Follow[]       @relation("Following")
    followers             Follow[]       @relation("Followers")
    likes                 Like[]
    bookmarks             Bookmark[]
    comments              Comment[]
    receivedNotifications Notification[] @relation("Recipient")
    issuedNotifications   Notification[] @relation("Issuer")

    createdAt DateTime @default(now())

    @@map("users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_tokens")
}

model Follow {
    followerId  String
    follower    User   @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
    followingId String
    following   User   @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

    @@unique([followerId, followingId])
    @@map("follows")
}

model Post {
    id                  String         @id @default(cuid())
    content             String
    userId              String
    user                User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    attachments         Media[]
    likes               Like[]
    bookmarks           Bookmark[]
    comments            Comment[]
    linkedNotifications Notification[]

    createdAt DateTime @default(now())

    @@map("posts")
}

model Media {
    id     String  @id @default(cuid())
    postId String?
    post   Post?   @relation(fields: [postId], references: [id], onDelete: SetNull)
    type   String // IMAGE | VIDEO
    url    String

    createdAt DateTime @default(now())

    @@map("post_media")
}

model Comment {
    id      String @id @default(cuid())
    content String
    userId  String
    user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    postId  String
    post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())

    @@map("comments")
}

model Like {
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    postId String
    post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

    @@unique([userId, postId])
    @@map("likes")
}

model Bookmark {
    id     String @id @default(cuid())
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    postId String
    post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())

    @@unique([userId, postId])
    @@map("bookmarks")
}

model Notification {
    id          String  @id @default(cuid())
    recipientId String
    recipient   User    @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade)
    issuerId    String
    issuer      User    @relation("Issuer", fields: [issuerId], references: [id], onDelete: Cascade)
    postId      String?
    post        Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
    type        String // LIKE | FOLLOW | COMMENT
    read        Boolean @default(false)

    createdAt DateTime @default(now())

    @@map("notifications")
}
